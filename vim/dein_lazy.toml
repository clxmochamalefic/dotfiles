[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
on_source = ['denops.vim']
hook_post_source = '''
  call ddu#custom#patch_global({
      \ 'ui': 'ff',
      \ 'sources': [{'name': 'file_rec', 'params': {}},
      \             {'name': 'file'},
      \             {'name': 'buffer'},
      \             {'name': 'emoji'}],
      \ })

  " Use matcher_substring filter.
  call ddu#custom#patch_global({
      \   'sourceOptions': {
      \     '_': {
      \       'matchers': ['matcher_substring'],
      \     },
      \   }
      \ })

  " Enable highlight matched text
  " Note: It is slow
  call ddu#custom#patch_global({
      \   'filterParams': {
      \     'matcher_substring': {
      \       'highlightMatched': 'Search',
      \     },
      \   }
      \ })

  call ddu#custom#patch_global({
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \     'word': {
      \       'defaultAction': 'append',
      \     },
      \   }
      \ })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = ['ddu.vim']
hook_add = '''
  if has('macunix')
    command "brew install desktop-file-utils"
  endif

  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>
          \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>
          \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    nnoremap <buffer><silent> i
          \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> q
          \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>
    \ <Esc><Cmd>close<CR>
    nnoremap <buffer><silent> <CR>
    \ <Cmd>close<CR>
    nnoremap <buffer><silent> q
    \ <Cmd>close<CR>
  endfunction
'''

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
hook_add = '''
  call ddu#custom#patch_local('buffer', {
  \   'ui': 'ff',
  \   'sources': [
  \     {
  \       'name': 'buffer',
  \       'params': {},
  \     },
  \   ],
  \ })
  nnoremap  \  :<C-u>call ddu#start({ 'name': 'buffer' })<CR>
  command! DduBuffer call ddu#start({ 'name': 'buffer' })
'''
#[plugins.ftplugin]
#ddu-ff = '''
#  let s:diff_buffer_source = '';
#
#  function! DduFfBufferSplit() abort
#    if s:diff_buffer_source = ''
#
#    endif
#  endfunction
#
#  function! ddu_source_buffer_ddu_ff_my_settings() abort
#    nnoremap <buffer><silent> c <Cmd>close<CR>
#  endfunction
#
#  augroup ddu_source_buffer_ddu_ff_executed
#    autocmd!
#    autocmd FileType ddu-ff-filter call s:ddu_source_buffer_ddu_ff_my_settings()
#  augroup END
#'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = ['ddu.vim']
hook_add = '''
  call ddu#custom#patch_local('filer', #{
  \   ui: 'filer',
  \   sources: [
  \     #{
  \       name: 'file',
  \       params: #{},
  \     },
  \   ],
  \   sourceOptions: #{
  \     _: #{
  \       columns: ['icon_filename'],
  \     },
  \   },
  \   kindOptions: #{
  \     file: #{
  \       defaultAction: 'open',
  \     },
  \   },
  \   actionOptions: #{
  \     narrow: #{
  \       quit: v:false,
  \     },
  \   },
  \   uiParams: #{
  \     filer: #{
  \       search: expand('%:p'),
  \       sort: 'filename',
  \       sortTreesFirst: v:true,
  \     },
  \   },
  \ })

  autocmd TabEnter,CursorHold,FocusGained <buffer>
    \ call ddu#ui#filer#do_action('checkItems')

  autocmd FileType ddu-filer call s:ddu_filer_my_settings()
  function! s:ddu_filer_my_settings() abort
    "nnoremap <buffer><silent><expr> <CR>
    "  \ ddu#ui#filer#is_tree() ?
    "  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow'})<CR>" :
    "  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'choosewin'}})<CR>"
    "nnoremap <buffer><silent><expr> <CR>
    "  \ ddu#ui#filer#is_tree() ?
    "  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow'})<CR>" :
    "  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>"
    nnoremap <buffer><silent><expr> <CR>
      \ ddu#ui#filer#is_tree() ?
      \ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow'})<CR>" :
      \ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open'})<CR>"

    nnoremap <buffer><silent> q
      \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>

    nnoremap <buffer><silent> <BS>
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>

    nnoremap <buffer><silent> c
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'copy'})<CR>

    nnoremap <buffer><silent> x
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'cut'})<CR>

    nnoremap <buffer><silent> p
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'paste'})<CR>

    nnoremap <buffer><silent> d
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'delete'})<CR>

    nnoremap <buffer><silent> r
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'rename'})<CR>

    nnoremap <buffer><silent> R
      \ <Cmd>call ddu#ui#filer#do_action('checkItems')<CR>


    nnoremap <buffer><silent> m
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'move'})<CR>

    nnoremap <buffer><silent> b
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newFile'})<CR>

    nnoremap <buffer><silent> B
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newDirectory'})<CR>

    nnoremap <buffer><silent> yy
      \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'yank'})<CR>

    nnoremap <buffer><silent> h
      \ <Cmd>call ddu#ui#filer#do_action('collapseItem')<CR>

    nnoremap <buffer><silent> l
      \ <Cmd>call ddu#ui#filer#do_action('expandItem')<CR>

    nnoremap <buffer><silent> <TAB>
      \ <Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>

  endfunction

  command! DduFiler     call ddu#start({ 'name': 'filer', 'uiParams': {} })
  command! DduFilerHome call ddu#start({ 'name': 'filer', 'uiParams': { 'filer': { 'search': expand($HOME) } } })

  nnoremap  ^  :<C-u>DduFiler<CR>
  nnoremap  ~  :<C-u>DduFilerHome<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = ['ddu.vim']
hook_add = '''
  call ddu#custom#patch_global({
      \   'kindOptions': {
      \     'action': {
      \       'defaultAction': 'do',
      \     },
      \   }
      \ })
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = ['ddu.vim', 'ddu-kind-file']

[[plugins]]
repo = 'Shougo/ddu-kind-word'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = ['ddu.vim']
hook_add = '''
'''

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = ['ddu.vim']

[[plugins]]
repo = '4513ECHO/ddu-source-emoji'
on_source = ['ddu.vim', 'ddu-kind-emoji']
hook_add = '''
  call ddu#custom#patch_local('emoji', {
  \   'sources': [
  \     {
  \       'name': 'emoji',
  \       'params': {},
  \     },
  \   ],
  \   'kindOptions': {
  \     'word': {
  \       'defaultAction': 'append',
  \     },
  \   },
  \ })
  command! DduEmoji call ddu#start({ 'name': 'emoji' })
"  command! DduEmoji call ddu#start({ 'sources': [{ 'name': 'emoji' }] })
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd', 'md']
build = 'sh -c "cd app && yarn install"'
