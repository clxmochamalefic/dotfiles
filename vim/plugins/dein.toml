[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
      let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
      let cmd = 'make -f make_cygwin.mak'
      elseif executable('gmake')
      let cmd = 'gmake'
      else
      let cmd = 'make'
      endif
      let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  " invoke with '-'
  nmap  -  <Plug>(choosewin)
'''

[[plugins]]
repo = "Shougo/deol.nvim"
hook_add = '''
  let g:deol#floating_border = "rounded"

  let s:window_width  = system('columns')
  let s:window_height = system('lines')

  "let s:width  = system('columns') - 10
  "let s:height = system('lines') - 30

  "let s:width = s:window_width - 10
  "let s:height = s:window_height - 30

  " 【Ctrl + o】 float windowでターミナルを表示
  "nnoremap <silent><C-o> :<C-u>execute "Deol" "-cwd=" . fnamemodify(expand('%'), ":h") . " -split=floating" . " -winwidth=" . "100" . " -winheight=" . s:height<CR>
  nnoremap <silent><C-o> :<C-u>execute "Deol" "-cwd=" . fnamemodify(expand('%'), ":h") . " -split=floating"<CR>
  " 【ESC】 ターミナルモードから抜ける
  tnoremap <ESC>   <C-\><C-n>

  augroup DeolFloatingWindowBlending
    autocmd!
    autocmd FileType deol set winblend=10  " こちらも 5 〜 30 で試してみてください。
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function (client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local servers = {
  { name="tsserver", root_pattern={ "package.json", "tsconfig.json" } },
  { name="denols", root_pattern={ "deno.json", "deno.jsonc" } },
  { name="prismals" },
  { name="omnisharp" },
  { name="dockerls" },
  { name="eslint" },
  { name="jsonls" },
  { name="intelephense" },
  { name="powershell_es" },
  { name="sqlls" },
  { name="lemminx" },
  { name="yamlls" },
  { name="html" },
  { name="cssls" },
  { name="marksman" },
  { name="clangd" },
  { name="vimls" },
  { name="sumneko_lua" },
  { name="sqls" },
}

local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}

for _, server in ipairs(servers) do
  nvim_lsp[server["name"]].setup {
    on_attach = on_attach,
    root_dir = nvim_lsp.util.root_pattern(server["root_pattern"]) or root_dir,
    autostart = true,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = lsp_flags,
    }
  }
end

EOF
'''

