[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]] # カラースキーマ
repo = 'cocopon/iceberg.vim'
hook_add = '''
  set background=dark
  colorscheme iceberg
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''   
  set laststatus=2
  let g:airline_theme = 'deus'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#virtualenv#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Shougo/vimproc.vim'
#build = 'make'
hook_post_update = '''
  if dein#util#_is_windows()
      let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
      let cmd = 'make -f make_cygwin.mak'
      elseif executable('gmake')
      let cmd = 'gmake'
      else
      let cmd = 'make'
      endif
      let g:dein#plugin.build = cmd
'''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_i = 1
# hook_source = '''
#   let g:deoplete#enable_at_startup = 1
#   call deoplete#custom#option('enable_smart_case', 1)
#   inoremap <expr><TAB> pumvisible() ? "\<C-N>" : "\<TAB>"
# '''
# 
# [[plugins]]
# repo = 'Shougo/deoplete-nextword'

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  " invoke with '-'
  nmap  -  <Plug>(choosewin)
'''

[[plugins]]
repo = "Shougo/deol.nvim"
hook_add = '''
  let g:deol#floating_border = "rounded"

  "let s:window_width  = system('columns')
  "let s:window_height = system('lines')

  "let s:width  = system('columns') - 10
  "let s:height = system('lines') - 30

  "let s:width = s:window_width - 10
  "let s:height = s:window_height - 30

  " 【Ctrl + o】 float windowでターミナルを表示
  "nnoremap <silent><C-o> :<C-u>execute "Deol" "-cwd=" . fnamemodify(expand('%'), ":h") . " -split=floating" . " -winwidth=" . system('columns') - 10 . " -winheight=" . system('lines') - 30<CR>
  nnoremap <silent><C-o> :<C-u>execute "Deol" "-cwd=" . fnamemodify(expand('%'), ":h") . " -split=floating"<CR>
  " 【ESC】 ターミナルモードから抜ける
  tnoremap <ESC>   <C-\><C-n>
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'szw/vim-tags'

#[[plugins]]
#repo = 'nvim-treesitter/nvim-treesitter'
#on_if = 'has("nvim")'
#merged = '0'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_source = '''
  " Customize global settings
  " Use around source.
  " https://github.com/Shougo/ddc-around
  call ddc#custom#patch_global('sources', ['nvim-lsp', 'around'])
  
  " Use matcher_head and sorter_rank.
  " https://github.com/Shougo/ddc-matcher_head
  " https://github.com/Shougo/ddc-sorter_rank
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank']
        \  },
        \ 'around': {'mark': 'A'},
        \ 'nvim-lsp': {
        \   'mark': 'lsp',
        \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
        \ },
        \ })
  call ddc#custom#patch_global('sourceParams', {
        \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
        \ 'around': {'maxSize': 500},
        \ })
  
  " Customize settings on a filetype
  call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around', 'clangd'])
  call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
        \ 'clangd': {'mark': 'C'},
        \ })
  call ddc#custom#patch_filetype('markdown', 'sourceParams', {
        \ 'around': {'maxSize': 100},
        \ })
  
  " Mappings
  
  " <TAB>: completion.
  inoremap <silent><expr> <C-n>
  \ pumvisible() ? '<C-n>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
  inoremap <silent><expr> <C-n> pumvisible() ? '<C-n>' : '<C-n>'
  
  " <S-TAB>: completion back.
  inoremap <expr><C-p>  pumvisible() ? '<C-p>' : '<C-p>'
  
  " Use ddc.
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
  "inoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
  "inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  "inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  "inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
  inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_source = '''
" NOTE: You can use other key to expand snippet.

" Expand
  imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
  smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
  
  " Expand or jump
  imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
  smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
  
  " Jump forward or backward
"  imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"  smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"  imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
"  smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

  "imap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
  "smap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
  "imap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
  "smap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
  
  " Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
  " See https://github.com/hrsh7th/vim-vsnip/pull/50
  "nmap        s   <Plug>(vsnip-select-text)
  "xmap        s   <Plug>(vsnip-select-text)
  "nmap        S   <Plug>(vsnip-cut-text)
  "xmap        S   <Plug>(vsnip-cut-text)
  
  " If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
  let g:vsnip_filetypes = {}
  let g:vsnip_filetypes.javascriptreact = ['javascript']
  let g:vsnip_filetypes.typescriptreact = ['typescript']
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function (client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local servers = {
  { name="tsserver", root_pattern={ "package.json" } },
  { name="denols", root_pattern={ "deno.json", "deno.jsonc" } },
  { name="prismals" },
  { name="omnisharp" },
  { name="dockerls" },
  { name="eslint" },
  { name="jsonls" },
  { name="intelephense" },
  { name="powershell_es" },
  { name="sqlls" },
  { name="lemminx" },
  { name="yamlls" },
  { name="html" },
  { name="cssls" },
  { name="marksman" },
  { name="clangd" },
  { name="vimls" },
  { name="sumneko_lua" },
  { name="sqls" },
}

for _, server in ipairs(servers) do
  nvim_lsp[server["name"]].setup {
    on_attach = on_attach,
    root_dir = nvim_lsp.util.root_pattern(server["root_pattern"]) or root_dir,
    autostart = true,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    }
  }
end

nvim_lsp.denols.setup {
  on_attach = on_attach,
  root_dir = nvim_lsp.util.root_pattern("deno.json", "deno.jsonc"),
}

nvim_lsp.tsserver.setup {
  on_attach = on_attach,
  root_dir = nvim_lsp.util.root_pattern(),
}

-- require'lspinstall'.setup()
-- local servers = require'lspinstall'.installed_servers()
-- for _, server in pairs(servers) do
--     require'lspconfig'[server].setup{}
-- end
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local lsp_installer = require("nvim-lsp-installer")

-- lsp_installer setting
lsp_installer.settings({
    ui = {
        icons = {
            server_installed = "✓",
            server_pending = "➜",
            server_uninstalled = "✗"
        }
    }
})

local servers = {
	"tsserver",
	"prismals",
	"omnisharp",
	"dockerls",
	"eslint",
	"jsonls",
	"intelephense",
	"powershell_es",
	"sqlls",
	"lemminx",
	"yamlls",
	"html",
	"cssls",
}

-- Register a handler that will be called for all installed servers.
-- Alternatively, you may also register handlers on specific server instances instead (see example below).
lsp_installer.on_server_ready(function(server)
	-- Specify the default options which we'll use for pyright and solargraph
	-- Note: These are automatically setup from nvim-lspconfig.
        -- See https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
	local default_opts = {
		on_attach = on_attach,
		capabilities = capabilities,
	}

	-- Now we'll create a server_opts table where we'll specify our custom LSP server configuration
	local server_opts = {
		["efm"] = function()
			default_opts.cmd = {
				vim.fn.stdpath("data") .. "/lsp_servers/efm/efm-langserver",
				"-c",
				"/Users/Oli/.config/efm-langserver/config.yaml",
			}
			default_opts.flags = {
				debounce_text_changes = 150,
			}
			default_opts.filetypes = {
				"css",
				"html",
				"javascript",
				"python",
			}
			default_opts.init_options = {
				documentFormatting = true,
			}

			default_opts.on_attach = on_attach
			default_opts.capabilities = capabilities

			return default_opts
		end,
	}

	-- We check to see if any custom server_opts exist for the LSP server, if so, load them, if not, use our default_opts
	server:setup(server_opts[server.name] and server_opts[server.name]() or default_opts)
	vim.cmd([[ do User LspAttachBuffers ]])
end)

for _, name in pairs(servers) do
	local ok, server = lsp_installer.get_server(name)
	-- Check that the server is supported in nvim-lsp-installer
	if ok then
		if not server:is_installed() then
			print("Installing " .. name)
			server:install()
		end
	end
end
EOF
'''

[[plugins]]
repo = 'matsui54/ddc-nvim-lsp-doc'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_nvim_lsp_doc_config = {
       \ 'documentation': {
       \   'enable': v:true,
       \   'border': 'single',
       \   'maxWidth': 60,
       \   'maxHeight': 30,
       \ },
       \ 'signature': {
       \   'maxHeight': 5,
       \ },
       \ }
  call ddc_nvim_lsp_doc#enable()
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
on_source = ['ddc.vim', 'ddu.vim']
hook_add = '''
  let g:denops#deno = "deno"
  " denoのプロジェクト作るときにこれ設定入れないとだめだよ
  " command "deno run -A --no-check ./denops/@denops-private/cli.ts"
  " let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
hook_source = '''
lua << EOF
require'cmp'.setup {
  sources = {
    { name = 'nvim_lsp' }
  }
}

-- The nvim-cmp almost supports LSP's capabilities so You should advertise it to LSP servers..
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- The following example advertise capabilities to `clangd`.
-- require'lspconfig'.clangd.setup {
--   capabilities = capabilities,
-- }
EOF
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
hook_source = '''
lua << EOF
  -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
        -- require'snippy'.expand_snippet(args.body) -- For `snippy` users.
      end,
    },
    mapping = {
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
      ['<C-e>'] = cmp.mapping({
        i = cmp.mapping.abort(),
        c = cmp.mapping.close(),
      }),
      -- Accept currently selected item. If none selected, `select` first item.
      -- Set `select` to `false` to only confirm explicitly selected items.
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig')['tsserver'].setup {
    capabilities = capabilities
  }
EOF
'''
