[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]] # カラースキーマ
repo = 'cocopon/iceberg.vim'
hook_add = '''
  set background=dark
  colorscheme iceberg
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''   
  set laststatus=2
  let g:airline_theme = 'deus'
  let g:airline_experimental = 1
  let g:airline_detect_spell=1
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#virtualenv#enabled = 1

  if !exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif

  " From: https://vi.stackexchange.com/a/3363
  " unicode symbols
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.linenr = '␊'
  let g:airline_symbols.linenr = '␤'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.whitespace = 'Ξ'

  " airline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Shougo/vimproc.vim'
#build = 'make'
hook_post_update = '''
  if dein#util#_is_windows()
      let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
      let cmd = 'make -f make_cygwin.mak'
      elseif executable('gmake')
      let cmd = 'gmake'
      else
      let cmd = 'make'
      endif
      let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  " invoke with '-'
  nmap  -  <Plug>(choosewin)
'''

[[plugins]]
repo = "Shougo/deol.nvim"
hook_add = '''
  let g:deol#floating_border = "rounded"

  let s:window_width  = system('columns')
  let s:window_height = system('lines')

  "let s:width  = system('columns') - 10
  "let s:height = system('lines') - 30

  "let s:width = s:window_width - 10
  "let s:height = s:window_height - 30

  " 【Ctrl + o】 float windowでターミナルを表示
  "nnoremap <silent><C-o> :<C-u>execute "Deol" "-cwd=" . fnamemodify(expand('%'), ":h") . " -split=floating" . " -winwidth=" . "100" . " -winheight=" . s:height<CR>
  nnoremap <silent><C-o> :<C-u>execute "Deol" "-cwd=" . fnamemodify(expand('%'), ":h") . " -split=floating"<CR>
  " 【ESC】 ターミナルモードから抜ける
  tnoremap <ESC>   <C-\><C-n>
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'vim-denops/denops.vim'
on_source = ['ddc.vim', 'ddu.vim']
hook_add = '''
  let g:denops#deno = "deno"
  " denoのプロジェクト作るときにこれ設定入れないとだめだよ
  " command "deno run -A --no-check ./denops/@denops-private/cli.ts"
  " let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('max_width', 80)
  call pum#set_option('use_complete', v:true)
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold', 'CmdlineEnter']
hook_source = '''
  call ddc#custom#patch_global('ui', 'pum')
  " Customize global settings
  " Use around source.
  " https://github.com/Shougo/ddc-around
  call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'emoji'])
  call ddc#custom#patch_global('cmdlineSources', ['cmdline', 'cmdline-history', 'around'])
  ;;
  
  " Use matcher_head and sorter_rank.
  " https://github.com/Shougo/ddc-matcher_head
  " https://github.com/Shougo/ddc-sorter_rank
  call ddc#custom#patch_global('sourceOptions', {
        \   '_': {
        \     'ignoreCase': v:true,
        \     'matchers': ['matcher_fuzzy'],
        \     'sorters': ['sorter_fuzzy'],
        \     'converters': ['converter_fuzzy'],
        \   },
        \   'around': {'mark': 'A'},
        \   'nvim-lsp': {
        \     'mark': 'lsp',
        \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
        \   },
        \   'cmdline': {
        \     'ignoreCase': v:false,
        \     'mark': '| cmd',
        \     'forceCompletionPattern': '\S/\S*',
        \   },
        \   'cmdline-history': {
        \     'mark': '| history',
        \   },
        \   'emoji': {
        \	    'mark': 'emoji',
        \	    'matchers': ['emoji'],
        \     'forceCompletionPattern': '[a-zA-Z_:]\w*',
        \	    'sorters': [],
        \	  },
        \ })

  " Add matching patterns
  call ddc#custom#patch_global('keywordPattern', '[a-zA-Z_:]\w*')

  call ddc#custom#patch_global('sourceParams', {
        \ 'nvim-lsp': { 'kindLabels': { 'Class': '[class]', 'Method': '[method]', 'Function': '[func]', 'Variable': '[var]' } },
        \ 'around': { 'maxSize': 500 },
        \ })
  
  " Mappings
  
  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged', 'TermOutput',
    \ ])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  " For insert mode completion
  inoremap <silent><expr> <TAB>
   \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
   \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
   \ '<TAB>' : ddc#map#manual_complete()
  inoremap <silent><expr> <C-n>
   \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'

  inoremap <silent><expr> <CR>
   \ pum#visible() ? ddc#map#manual_complete() : '<CR>'

  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  inoremap <silent><expr> <C-l>   ddc#map#extend()
  inoremap <silent><expr> <C-x><C-f> ddc#map#manual_complete('path')
  
  " Use ddc.
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'gamoutatsumi/ddc-emoji'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = ['nvim-lspconfig']

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = ['nvim-lspconfig', 'mason.nvim']
hook_source = '''
lua << EOF
local mason = require('mason')

-- mason setting
mason.setup({
  ui = {
    icons = {
      package_installed   = "✓",
      package_pending     = "➜",
      package_uninstalled = "✗"
    }
  }
})

local servers = {
  "tsserver",
  "denols",
  "prismals",
  "omnisharp",
  "dockerls",
  "eslint",
  "jsonls",
  "intelephense",
  "powershell_es",
  "sqlls",
  "lemminx",
  "yamlls",
  "html",
  "cssls",
  "marksman",
  "clangd",
  "vimls",
  "sumneko_lua",
  "sqls",
}

local nvim_lsp = require('lspconfig')
local mason_lspconfig = require('mason-lspconfig')

mason_lspconfig.setup({
  ensure_installed = servers
})
mason_lspconfig.setup_handlers({
  function(server_name)
    local opts = {}
    opts.on_attach = function(_, bufnr)
      local bufopts = { silent = true, buffer = bufnr }

      vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
      vim.keymap.set('n', 'gtD', vim.lsp.buf.type_definition, bufopts)
      vim.keymap.set('n', 'grf', vim.lsp.buf.references, bufopts)
      vim.keymap.set('n', '<space>p', vim.lsp.buf.format, bufopts)
    end

    nvim_lsp[server_name].setup(opts)
  end
})

EOF
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = ['denops.vim', 'pum', 'ddc.vim', 'ddc-nvim-lsp']
hook_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = ['denops.vim', 'pum', 'ddc.vim', 'ddc-nvim-lsp']
hook_source = '''
  call signature_help#enable()
'''

